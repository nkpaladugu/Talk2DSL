import configparser
import os

class DSLDocumentGenerator:
    def load_dsl_file(self, dsl_file_path):
        """Reads the DSL file and returns a dictionary of its contents."""
        if not os.path.exists(dsl_file_path):
            raise FileNotFoundError(f"DSL file not found: {dsl_file_path}")
        
        config = configparser.ConfigParser()
        config.read(dsl_file_path)
        
        dsl_content = {}
        # Check for DEFAULT section or any section
        if 'DEFAULT' in config:
            dsl_content = dict(config['DEFAULT'])
        else:
            # Merge all sections into one dictionary if no DEFAULT section
            for section in config.sections():
                dsl_content.update(config[section])
        
        if not dsl_content:
            raise ValueError("DSL file is empty or improperly formatted")
        
        return dsl_content

    def construct_llm_prompt(self, dsl_content):
        """Constructs a prompt for the LLM based on DSL content."""
        topic = dsl_content.get('topic', 'Unknown Topic')
        keywords = dsl_content.get('keywords', '')
        prompt = f"Generate a concise, professional document about {topic}. "
        if keywords:
            prompt += f"Focus on these key aspects: {keywords}. "
        prompt += "The document should be 100-150 words, coherent, and suitable for a general audience."
        return prompt

    def call_llm(self, prompt, dsl_content):
        """Simulates an LLM by generating text based on DSL content."""
        topic = dsl_content.get('topic', 'Unknown Topic')
        keywords = dsl_content.get('keywords', '')
        
        response = f"# {topic}\n\n"
        response += f"{topic} is a pivotal subject in contemporary discussions. "
        
        if keywords:
            keyword_list = [kw.strip() for kw in keywords.split(',')]
            response += "This document highlights the following key aspects:\n"
            for keyword in keyword_list:
                response += f"- **{keyword.capitalize()}**: {self.generate_sentence_for_keyword(keyword, topic)}\n"
            response += f"\nBy addressing these aspects, {topic.lower()} fosters a framework for responsible and impactful advancements."
        else:
            response += f"While no specific aspects were provided, {topic.lower()} remains essential for ongoing exploration and development."
        
        return response

    def generate_sentence_for_keyword(self, keyword, topic):
        """Generates a sentence for a keyword, simulating LLM contextual output."""
        keyword = keyword.lower()
        sentence_map = {
            "responsibility": f"{keyword.capitalize()} ensures accountability in {topic} practices.",
            "transparency": f"{keyword.capitalize()} promotes open communication within {topic}.",
            "fairness": f"{keyword.capitalize()} drives equitable outcomes in {topic} applications."
        }
        return sentence_map.get(keyword, f"{keyword.capitalize()} supports effective progress in {topic}.")

    def write_to_file(self, content, output_file_path):
        """Writes the generated text to a file."""
        try:
            with open(output_file_path, 'w', encoding='utf-8') as f:
                f.write(content)
        except IOError as e:
            raise IOError(f"Error writing to output file: {e}")

    def generate_document(self, dsl_file_path, output_file_path):
        """Main method to process DSL file and generate document."""
        try:
            dsl_content = self.load_dsl_file(dsl_file_path)
            prompt = self.construct_llm_prompt(dsl_content)
            generated_text = self.call_llm(prompt, dsl_content)
            self.write_to_file(generated_text, output_file_path)
            print(f"Document generated successfully at: {output_file_path}")
        except Exception as e:
            print(f"Error processing DSL file or generating document: {e}")

if __name__ == "__main__":
    generator = DSLDocumentGenerator()
    dsl_file_path = "input.dsl"
    output_file_path = "output.txt"
    generator.generate_document(dsl_file_path, output_file_path)
